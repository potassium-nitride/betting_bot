"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞–≤–æ–∫
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from app.src.database import (
    get_event_by_id, get_user, create_bet, get_user_bets,
    BetStatus, EventStatus
) # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from app.config.settings import MIN_BET_AMOUNT, MAX_BET_AMOUNT

async def bet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, callback_data: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞–≤–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if callback_data.startswith("event_"):
        # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥—ã —Å–æ–±—ã—Ç–∏—è
        event_id = int(callback_data.split("_")[1])
        await show_event_outcomes(update, context, event_id)
    
    elif callback_data.startswith("outcome_"):
        # –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–≤–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥
        parts = callback_data.split("_")
        event_id = int(parts[1])
        outcome_id = int(parts[2])
        await start_betting_process(update, context, event_id, outcome_id)

async def show_event_outcomes(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥—ã —Å–æ–±—ã—Ç–∏—è"""
    event = await get_event_by_id(event_id)
    
    if not event:
        await update.callback_query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    if event.status != EventStatus.UPCOMING:
        await update.callback_query.edit_message_text("‚ùå –°—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è")
        return
    
    text = (
        f"üèÜ **{event.title}**\n\n"
        f"üìÖ –ù–∞—á–∞–ª–æ: {event.start_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù {event.description}\n\n"
        f"üí∞ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ö–æ–¥—ã:**\n\n"
    )
    
    keyboard = []
    
    for outcome in event.outcomes:
        text += f"‚Ä¢ {outcome.title} - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {outcome.odds:.2f}\n"
        keyboard.append([InlineKeyboardButton(
            f"{outcome.title} ({outcome.odds:.2f})",
            callback_data=f"outcome_{event_id}_{outcome.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—è–º", callback_data="events")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text, 
        reply_markup=reply_markup, 
        parse_mode='Markdown'
    )

async def start_betting_process(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, outcome_id: int):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–≤–∫–∏"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(user_id)
    if not user:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏–µ
    event = await get_event_by_id(event_id)
    if not event or event.status != EventStatus.UPCOMING:
        await query.edit_message_text("‚ùå –°—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥
    outcome = None
    for o in event.outcomes:
        if o.id == outcome_id:
            outcome = o
            break
    
    if not outcome:
        await query.edit_message_text("‚ùå –ò—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['state'] = 'waiting_bet_amount'
    context.user_data['bet_event_id'] = event_id
    context.user_data['bet_outcome_id'] = outcome_id
    
    text = (
        f"üí∞ **–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏**\n\n"
        f"üèÜ –°–æ–±—ã—Ç–∏–µ: {event.title}\n"
        f"üéØ –ò—Å—Ö–æ–¥: {outcome.title}\n"
        f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {outcome.odds:.2f}\n\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} –µ–¥–∏–Ω–∏—Ü\n\n"
        f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–æ—Ç {MIN_BET_AMOUNT} –¥–æ {MAX_BET_AMOUNT}):"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="events")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def process_bet(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, outcome_id: int, amount: float):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏"""
    user_id = update.effective_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    if amount < MIN_BET_AMOUNT:
        await update.message.reply_text(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {MIN_BET_AMOUNT} –µ–¥–∏–Ω–∏—Ü")
        return
    
    if amount > MAX_BET_AMOUNT:
        await update.message.reply_text(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {MAX_BET_AMOUNT} –µ–¥–∏–Ω–∏—Ü")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å
    user = await get_user(user_id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user.balance < amount:
        await update.message.reply_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance:.2f} –µ–¥–∏–Ω–∏—Ü")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏ –∏—Å—Ö–æ–¥
    event = await get_event_by_id(event_id)
    if not event or event.status != EventStatus.UPCOMING:
        await update.message.reply_text("‚ùå –°—Ç–∞–≤–∫–∏ –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è")
        return
    
    outcome = None
    for o in event.outcomes:
        if o.id == outcome_id:
            outcome = o
            break
    
    if not outcome:
        await update.message.reply_text("‚ùå –ò—Å—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–≤–∫—É
    bet = await create_bet(user_id, event_id, outcome_id, amount, outcome.odds)
    
    if bet:
        text = (
            f"‚úÖ **–°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
            f"üèÜ –°–æ–±—ã—Ç–∏–µ: {event.title}\n"
            f"üéØ –ò—Å—Ö–æ–¥: {outcome.title}\n"
            f"üí∞ –°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: {amount:.2f} –µ–¥–∏–Ω–∏—Ü\n"
            f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {outcome.odds:.2f}\n"
            f"üéÅ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {bet.potential_win:.2f} –µ–¥–∏–Ω–∏—Ü\n\n"
            f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance - amount:.2f} –µ–¥–∏–Ω–∏—Ü"
        )
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏", callback_data="my_bets")],
            [InlineKeyboardButton("üéØ –î—Ä—É–≥–∏–µ —Å–æ–±—ã—Ç–∏—è", callback_data="events")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def my_bets_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mybets"""
    user_id = update.effective_user.id
    user_bets = await get_user_bets(user_id)
    
    if not user_bets:
        text = "üí∞ **–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏**\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞–≤–æ–∫"
        keyboard = [
            [InlineKeyboardButton("üéØ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", callback_data="events")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    else:
        text = "üí∞ **–í–∞—à–∏ —Å—Ç–∞–≤–∫–∏:**\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
        pending_bets = [bet for bet in user_bets if bet.status == BetStatus.PENDING]
        won_bets = [bet for bet in user_bets if bet.status == BetStatus.WON]
        lost_bets = [bet for bet in user_bets if bet.status == BetStatus.LOST]
        
        if pending_bets:
            text += "‚è≥ **–í –æ–∂–∏–¥–∞–Ω–∏–∏:**\n"
            for bet in pending_bets[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                text += (
                    f"‚Ä¢ {bet.event.title}\n"
                    f"  –ò—Å—Ö–æ–¥: {bet.outcome.title}\n"
                    f"  –°—Ç–∞–≤–∫–∞: {bet.amount:.2f} (–∫–æ—ç—Ñ. {bet.odds:.2f})\n"
                    f"  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à: {bet.potential_win:.2f}\n\n"
                )
        
        if won_bets:
            text += "‚úÖ **–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ:**\n"
            for bet in won_bets[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                text += (
                    f"‚Ä¢ {bet.event.title}\n"
                    f"  –í—ã–∏–≥—Ä—ã—à: {bet.potential_win:.2f} –µ–¥–∏–Ω–∏—Ü\n\n"
                )
        
        if lost_bets:
            text += "‚ùå **–ü—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–µ:**\n"
            for bet in lost_bets[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
                text += (
                    f"‚Ä¢ {bet.event.title}\n"
                    f"  –ü–æ—Ç–µ—Ä—è: {bet.amount:.2f} –µ–¥–∏–Ω–∏—Ü\n\n"
                )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_amount = sum(bet.amount for bet in user_bets)
        total_won = sum(bet.potential_win for bet in won_bets)
        profit = total_won - total_amount
        
        text += (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {len(user_bets)}\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f}\n"
            f"–í—ã–∏–≥—Ä—ã—à–∏: {total_won:.2f}\n"
            f"–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: {profit:+.2f}"
        )
        
        keyboard = [
            [InlineKeyboardButton("üéØ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞", callback_data="events")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

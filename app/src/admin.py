"""
–ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ —Å—Ç–∞–≤–∫–∞–º–∏
"""
from datetime import datetime, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import ADMIN_IDS
from src.database import (
    create_event, get_active_events, get_event_by_id,
    Event, Outcome, EventStatus, BetStatus, get_db, SessionLocal,
    update_user_balance, DATABASE_URL, User, Bet
) # –î–æ–±–∞–≤–ª–µ–Ω—ã DATABASE_URL, User, Bet –¥–ª—è show_admin_stats

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    text = "‚öôÔ∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="admin_create_event")],
        [InlineKeyboardButton("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏", callback_data="admin_manage_events")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏", callback_data="admin_balances")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if data == "admin_menu":
        await admin_menu_handler(update, context)
    
    elif data == "admin_create_event":
        await start_event_creation(update, context)
    
    elif data == "admin_manage_events":
        await show_events_management(update, context)
    
    elif data == "admin_stats":
        await show_admin_stats(update, context)
    
    elif data == "admin_balances":
        await show_balance_management(update, context)
    
    elif data.startswith("admin_event_"):
        event_id = int(data.split("_")[2])
        await show_event_management(update, context, event_id)
    
    elif data.startswith("admin_finish_"):
        event_id = int(data.split("_")[2])
        await show_finish_event(update, context, event_id)
    
    elif data.startswith("admin_outcome_"):
        parts = data.split("_")
        event_id = int(parts[2])
        outcome_id = int(parts[3])
        await set_winning_outcome(update, context, event_id, outcome_id)

async def start_event_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    text = (
        "‚ûï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è**\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`/create_event –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è | –û–ø–∏—Å–∞–Ω–∏–µ | –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú | –ò—Å—Ö–æ–¥1:–ö–æ—ç—Ñ1 | –ò—Å—Ö–æ–¥2:–ö–æ—ç—Ñ2 | ...`\n\n"
        "**–ü—Ä–∏–º–µ—Ä:**\n"
        "`/create_event –ú–∞—Ç—á –°–ø–∞—Ä—Ç–∞–∫ - –¶–°–ö–ê | –§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á | 25.12.2024 19:00 | –ü–æ–±–µ–¥–∞ –°–ø–∞—Ä—Ç–∞–∫–∞:2.1 | –ù–∏—á—å—è:3.2 | –ü–æ–±–µ–¥–∞ –¶–°–ö–ê:2.8`"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_events_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    events = await get_active_events()
    
    if not events:
        text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏**\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"
        keyboard = [
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="admin_create_event")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
    else:
        text = "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:**\n\n"
        keyboard = []
        
        for event in events:
            status_emoji = "üî¥" if event.status == EventStatus.LIVE else "üü°"
            text += f"{status_emoji} {event.title} - {event.start_time.strftime('%d.%m %H:%M')}\n"
            keyboard.append([InlineKeyboardButton(
                f"‚öôÔ∏è {event.title}",
                callback_data=f"admin_event_{event.id}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="admin_create_event")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_event_management(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º"""
    event = await get_event_by_id(event_id)
    
    if not event:
        await update.callback_query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞–≤–æ–∫
    total_bets = len(event.bets)
    total_amount = sum(bet.amount for bet in event.bets)
    
    text = (
        f"‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–µ–º**\n\n"
        f"üèÜ **{event.title}**\n"
        f"üìÖ {event.start_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üìù {event.description}\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {event.status.value}\n\n"
        f"üí∞ **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–≤–æ–∫:**\n"
        f"–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_bets}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} –µ–¥–∏–Ω–∏—Ü\n\n"
        f"üéØ **–ò—Å—Ö–æ–¥—ã:**\n"
    )
    
    keyboard = []
    
    for outcome in event.outcomes:
        outcome_bets = len([bet for bet in event.bets if bet.outcome_id == outcome.id])
        outcome_amount = sum(bet.amount for bet in event.bets if bet.outcome_id == outcome.id)
        
        status_text = ""
        if outcome.is_winning is True:
            status_text = " ‚úÖ"
        elif outcome.is_winning is False:
            status_text = " ‚ùå"
        
        text += (
            f"‚Ä¢ {outcome.title} (–∫–æ—ç—Ñ. {outcome.odds:.2f}){status_text}\n"
            f"  –°—Ç–∞–≤–æ–∫: {outcome_bets}, –°—É–º–º–∞: {outcome_amount:.2f}\n"
        )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if event.status == EventStatus.UPCOMING:
        keyboard.append([InlineKeyboardButton("üî¥ –ù–∞—á–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"admin_start_{event_id}")])
    
    if event.status in [EventStatus.UPCOMING, EventStatus.LIVE]:
        keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"admin_finish_{event_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="admin_manage_events")])
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_finish_event(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
    event = await get_event_by_id(event_id)
    
    if not event:
        await update.callback_query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    text = (
        f"üèÅ **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è**\n\n"
        f"üèÜ {event.title}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –∏—Å—Ö–æ–¥:"
    )
    
    keyboard = []
    
    for outcome in event.outcomes:
        keyboard.append([InlineKeyboardButton(
            f"‚úÖ {outcome.title}",
            callback_data=f"admin_outcome_{event_id}_{outcome.id}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"admin_event_{event_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def set_winning_outcome(update: Update, context: ContextTypes.DEFAULT_TYPE, event_id: int, outcome_id: int):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –∏—Å—Ö–æ–¥ –∏ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≤—ã–ø–ª–∞—Ç—ã"""
    from src.database import DATABASE_URL
    
    if DATABASE_URL.startswith('sqlite'):
        db = get_db()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = db.query(Event).filter(Event.id == event_id).first()
        if not event:
            await update.callback_query.edit_message_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –∏—Å—Ö–æ–¥
        for outcome in event.outcomes:
            if outcome.id == outcome_id:
                outcome.is_winning = True
            else:
                outcome.is_winning = False
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event.status = EventStatus.FINISHED
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫–∏
        winning_bets = []
        losing_bets = []
        
        for bet in event.bets:
            if bet.outcome_id == outcome_id:
                bet.status = BetStatus.WON
                winning_bets.append(bet)
                # –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
                await update_user_balance(bet.user_id, bet.potential_win)
            else:
                bet.status = BetStatus.LOST
                losing_bets.append(bet)
        
        db.commit()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–ª–∞—Ç
        total_payout = sum(bet.potential_win for bet in winning_bets)
        total_lost = sum(bet.amount for bet in losing_bets)
        
        winning_outcome = db.query(Outcome).filter(Outcome.id == outcome_id).first()
        
        text = (
            f"‚úÖ **–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            f"üèÜ {event.title}\n"
            f"üéØ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π –∏—Å—Ö–æ–¥: {winning_outcome.title}\n\n"
            f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
            f"–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {len(winning_bets)}\n"
            f"–ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {len(losing_bets)}\n"
            f"–û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: {total_payout:.2f} –µ–¥–∏–Ω–∏—Ü\n"
            f"–ü—Ä–∏–±—ã–ª—å –¥–æ–º–∞: {total_lost - total_payout:.2f} –µ–¥–∏–Ω–∏—Ü"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ö —Å–æ–±—ã—Ç–∏—è–º", callback_data="admin_manage_events")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    from src.database import DATABASE_URL, User, Bet
    
    if DATABASE_URL.startswith('sqlite'):
        db = get_db()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = db.query(User).count()
        total_bets = db.query(Bet).count()
        total_bet_amount = db.query(db.func.sum(Bet.amount)).scalar() or 0
        total_payouts = db.query(db.func.sum(Bet.potential_win)).filter(Bet.status == BetStatus.WON).scalar() or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å –±–∞–ª–∞–Ω—Å–æ–º > 0)
        active_users = db.query(User).filter(User.balance > 0).count()
        
        # –ü—Ä–∏–±—ã–ª—å –¥–æ–º–∞
        house_profit = total_bet_amount - total_payouts
        
        text = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {active_users}\n\n"
            f"üéØ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_bets}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫: {total_bet_amount:.2f}\n"
            f"üí∏ –û–±—â–∏–µ –≤—ã–ø–ª–∞—Ç—ã: {total_payouts:.2f}\n"
            f"üè¶ –ü—Ä–∏–±—ã–ª—å –¥–æ–º–∞: {house_profit:.2f}\n\n"
            f"üìà –ú–∞—Ä–∂–∞: {(house_profit/total_bet_amount*100):.1f}%" if total_bet_amount > 0 else "üìà –ú–∞—Ä–∂–∞: 0%"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def show_balance_management(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏"""
    text = (
        f"üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞–º–∏**\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n"
        f"`/balance_add USER_ID AMOUNT` - –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        f"`/balance_sub USER_ID AMOUNT` - —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞\n\n"
        f"**–ü—Ä–∏–º–µ—Ä:**\n"
        f"`/balance_add 123456789 100` - –¥–æ–±–∞–≤–∏—Ç—å 100 –µ–¥–∏–Ω–∏—Ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 123456789"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞–º–∏
async def create_event_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/create_event –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú | –ò—Å—Ö–æ–¥1:–ö–æ—ç—Ñ1 | –ò—Å—Ö–æ–¥2:–ö–æ—ç—Ñ2"
        )
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        full_text = " ".join(context.args)
        parts = [part.strip() for part in full_text.split("|")]
        
        if len(parts) < 4:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        
        title = parts[0]
        description = parts[1]
        datetime_str = parts[2]
        outcomes_data = parts[3:]
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        start_time = datetime.strptime(datetime_str, "%d.%m.%Y %H:%M")
        start_time = start_time.replace(tzinfo=timezone.utc)
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        event = await create_event(title, description, start_time, user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥—ã
        from src.database import DATABASE_URL, Outcome
        
        if DATABASE_URL.startswith('sqlite'):
            db = get_db()
            
            for outcome_data in outcomes_data:
                outcome_parts = outcome_data.split(":")
                if len(outcome_parts) != 2:
                    continue
                
                outcome_title = outcome_parts[0].strip()
                outcome_odds = float(outcome_parts[1].strip())
                
                outcome = Outcome(
                    event_id=event.id,
                    title=outcome_title,
                    odds=outcome_odds
                )
                db.add(outcome)
            
            db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {start_time.strftime('%d.%m.%Y %H:%M')}"
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")

async def balance_add_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /balance_add USER_ID AMOUNT")
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = float(context.args[1])
        
        success = await update_user_balance(target_user_id, amount)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {amount:.2f} –µ–¥–∏–Ω–∏—Ü")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")

async def balance_sub_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /balance_sub USER_ID AMOUNT")
        return
    
    try:
        target_user_id = int(context.args[0])
        amount = float(context.args[1])
        
        success = await update_user_balance(target_user_id, -amount)
        
        if success:
            await update.message.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount:.2f} –µ–¥–∏–Ω–∏—Ü")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")

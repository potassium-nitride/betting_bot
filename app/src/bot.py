"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª Telegram-–±–æ—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
"""
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes
)
from config.settings import BOT_TOKEN, ADMIN_IDS
from src.database import init_db, get_user, create_user
from src.handlers import (
    start_handler, help_handler, profile_handler, 
    balance_handler, events_handler
)

from src.admin import admin_menu_handler, is_admin, create_event_command, balance_add_command, balance_sub_command
from src.betting import bet_handler, my_bets_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class BettingBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram-–±–æ—Ç–∞ –¥–ª—è —Å—Ç–∞–≤–æ–∫"""
    
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", start_handler))
        self.application.add_handler(CommandHandler("help", help_handler))
        self.application.add_handler(CommandHandler("profile", profile_handler))
        self.application.add_handler(CommandHandler("balance", balance_handler))
        self.application.add_handler(CommandHandler("events", events_handler))
        self.application.add_handler(CommandHandler("mybets", my_bets_handler))
        
        # –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("admin", admin_menu_handler))
        self.application.add_handler(CommandHandler("create_event", create_event_command))
        self.application.add_handler(CommandHandler("balance_add", balance_add_command))
        self.application.add_handler(CommandHandler("balance_sub", balance_sub_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        if data.startswith("bet_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
            await bet_handler(update, context, data)
        elif data.startswith("admin_"):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥
            if is_admin(user_id):
                await self.handle_admin_callback(update, context, data)
            else:
                await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        elif data == "main_menu":
            await self.show_main_menu(update, context)
    
    async def handle_admin_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        from src.admin import handle_admin_callback
        await handle_admin_callback(update, context, data)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = await get_user(user_id)
        if not user:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = context.user_data.get('state')
        
        if user_state == 'waiting_bet_amount':
            await self.process_bet_amount(update, context, text)
        else:
            await self.show_main_menu(update, context)
    
    async def process_bet_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE, amount_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏"""
        try:
            amount = float(amount_text)
            event_id = context.user_data.get('bet_event_id')
            outcome_id = context.user_data.get('bet_outcome_id')
            
            from src.betting import process_bet
            await process_bet(update, context, event_id, outcome_id, amount)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            )
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üéØ –°–æ–±—ã—Ç–∏—è", callback_data="events")],
            [InlineKeyboardButton("üí∞ –ú–æ–∏ —Å—Ç–∞–≤–∫–∏", callback_data="my_bets")],
            [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üí≥ –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        ]
        
        user_id = update.effective_user.id
        if is_admin(user_id):
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω", callback_data="admin_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
    
    async def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        await init_db()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        await self.application.run_polling()
    
    async def run_webhook(self, webhook_url: str, port: int):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        await init_db()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        await self.application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    bot = BettingBot()
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    asyncio.run(bot.run_polling())

if __name__ == "__main__":
    main()
